grammar no.hal.bdd.BddDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate bddDsl "http://www.hal.no/bdd/BddDsl"

Model:
	('model' name = ID)
	(
		(modelRefs += ModelRef) |
		(entityDefs += EntityDef) |
		(scenarios += Scenario)
	)*
;

ModelRef:
	'using' modelRef = [Model]
;

EntityDef:
	'entity' name = (ID | STRING) ('-'WORD)? ('is' superEntities += [EntityDef] (',' superEntities += [EntityDef])*)? '{'
		('actions:' (actions += ActionDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') actions += ActionDef)*)?
		('states:' (states += StateDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') states += StateDef)*)?
		('properties:' (properties += PropertyDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') properties += PropertyDef)*)?
	'}'
;

ActionDef:
	name = WORD ('and'|'the')? (WORD)? (argument = WORD)? ((preposition = PREP)? | (optionalPref ?= '['? (preposition = PREP|'out'|'off'|'on' 'the' 'row') ']'?))	
	
;

PREP: ('on' | 'in' | 'from' | 'to' | 'into'|'for');
WORD: ID;



StateDef: postive = StateName PREP? ('/' negative = StateName)?;
StateName: name = (WORD) ('and'|'off')?  (WORD)?;

PropertyDef: name = WORD (plural ?= '*')?;

//

ID_OR_STRING: (ID | STRING);

Scenario:
       'Scenario:' name = ID_OR_STRING WORD? ('out'|'off'|'on'|'in'|'-'|'the'|'to' 'the'|'to')? WORD? ('off'|'on'|'in'|'-'|'the')? WORD? ('on'|'in'|'-'|'the')? WORD? ('in'|'-'|'the')? WORD?
       (('Given''the' preStateE = ScenarioState)
       'which' 'means')
       (
       'Given' ('the'|'all' 'the')? preState = ScenarioState ('out'|'off'|'on'|'in'|'to' 'the'|'to')? (WORD? | WORD?('-'|'the')?WORD? | (WORD? 'in'? WORD?)) WORD?
       (('When' 'I') |('When' 'I' 'do' 'not')| ('When' 'the') | ('Given' 'I')) action = ScenarioAction 
       'Then' ('the'|'all' 'the')? (STRING)? postState = ScenarioState ('out'|'off'|'on'|'in'|'to' 'the'|'to')? (WORD? | WORD?('-'|'the')?WORD? | (WORD? 'in' WORD?)) WORD?
       )
       (
       	((('When' 'I'|'When' 'the'|'When'|'And''I') ('do' 'not')? ((OPTION))) | ((('When' 'I') |('When' 'I' 'do' 'not')| ('When' 'the') | ('Given' 'I')) actionE = ScenarioAction ))
       'which' 'means')
      ( 'Given' ('the'|'all' 'the')? preState1 = ScenarioState ('out'|'off'|'on'|'in'|'to' 'the'|'to')? (WORD? | WORD?('-'|'the')?WORD? | (WORD? 'in'? WORD?)) WORD?
       (('When' 'I') |('When' 'I' 'do' 'not')| ('When' 'the') | ('Given' 'I')) action1 = ScenarioAction )
       'Then' ('the'|'all' 'the')? (STRING)? postState1 = ScenarioState ('out'|'off'|'on'|'in'|'to' 'the'|'to')? (WORD? | WORD?('-'|'the')?WORD? | (WORD? 'in' WORD?)) WORD?
       
       (((('Then''the'|'Then''I'|'Then') ('do' 'not')? ((OPTION)) | ('Then' ('the'|'all' 'the'|'I')? ('do' 'not')? preStateE1 = ScenarioState))
       'which' 'means')
       ('Given' ('the'|'all' 'the')? preState2 = ScenarioState ('out'|'off'|'on'|'in'|'to' 'the'|'to')? (WORD? | WORD?('-'|'the')?WORD? | (WORD? 'in'? WORD?)) WORD?
       (('When' 'I') |('When' 'I' 'do' 'not')| ('When' 'the') | ('Given' 'I')) action2 = ScenarioAction )
       'Then' ('the'|'all' 'the')? (STRING)? postState2 = ScenarioState ('out'|'off'|'on'|'in'|'to' 'the'|'to')? (WORD? | WORD?('-'|'the')?WORD? | (WORD? 'in' WORD?)) WORD? 
       )
;


ScenarioState:
	states += StatePhrase (('And'|'And' 'the') states += StatePhrase)*
;

ScenarioAction:
	actions += ActionPhrase (('And' 'I'|'And') actions += ActionPhrase)*
;

StatePhrase: EntityPropertyStatePhrase | EntityStatePhrase;


/*
ScenarioRef:
	scenarioRef = [Scenario | ID_OR_STRING]
;
*/

//ENTITY_IDENTITY: '#'? (INT | STRING);
ENTITY_IDENTITY: '#'? (INT | STRING);
OPTION:'#'? (INT | STRING) ;

EntityRef:
		(entity = [EntityDef | WORD] name = ENTITY_IDENTITY) | (name = ENTITY_IDENTITY)
;

EntityStatePhrase:
	(property = [PropertyDef|WORD]? OPTION? ('of'|'of' 'the'|'for'|'for' 'the'|'on'|'on' 'the'))? 
	entity = EntityRef ('is'|'are') 'not'? (state += [StateName] 'and')* WORD?
;

EntityPropertyStatePhrase:
	  property = [PropertyDef|WORD]? OPTION? ('of'|'of' 'the'|'for' |'from'|'for' 'the'|'on'|'on' 'the') entity = EntityRef
	((('is'|'is' 'not') value = PropertyValue WORD?) WORD? | ('is'|'is' 'not'|'are'|'are' 'not') values += PropertyValue WORD? WORD?) 
;

//terminal UNCLOSED_STRING : '"' (!'"')* EOF;

PropertyValue: SimpleValue | ListValue | SetValue;

SimpleValue: IntValue | BooleanValue | StringValue;

ListValue:
	{ListValue} '[' (values += SimpleValue (',' values += SimpleValue)*)? ']'
;

SetValue:
	{SetValue} '{' (values += SimpleValue (',' values += SimpleValue)*)? '}'
;

StringValue:
	value = STRING
;

IntValue:
	value = INT
;

TRUE: ('true' | 'yes');
FALSE: ('false' | 'no');

BooleanValue:
	value = (TRUE | FALSE)
;

ActionPhrase: VerbAction | VerifyAction;

VerbAction:
	action = ActionRef 'and'? WORD? 'on'? (WORD'-'WORD)? ('for' 'the'| 'the'|'on'|'on' 'the'|'to' 'the'|'to')?
	(entity = EntityDef)? ('on'|'off'|'in')? entity = EntityRef ('on'|'off'|'in'|'of'|'for'|'for' 'the'|'of' 'the'|'on' 'the'|'to'|'to' 'the')? PREP? entity = EntityRef?
;

ActionRef:
	verb = [ActionDef | WORD] 'on'? (argument = PropertyValue)? (preposition = PREP)? (('the'|'on')(entity = EntityDef))?
;

VerifyAction:
	'assure' state = StatePhrase
;
