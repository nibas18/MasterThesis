grammar dk.sdu.bdd.xtext.BddDsl with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate bddDsl "http://www.sdu.dk/bdd/xtext/BddDsl"

Model:
	('model' name = ID)
	(
		(modelRefs += ModelRef) |
		(entityDefs += EntityDef) |
		(scenarios += Scenario)
	)*
;

ModelRef:
	'using' modelRef = [Model]
;

EntityDef:
	'entity' name = (ID | STRING) ('-'WORD)? ('is' superEntities += [EntityDef] (',' superEntities += [EntityDef])*)? '{'
		('actions:' (actions += ActionDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') actions += ActionDef)*)?
		('states:' (states += StateDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') states += StateDef)*)?
		('properties:' (properties += PropertyDef) WORD? (WORD'-'WORD)? ((','|'and'|'the') properties += PropertyDef)*)?
	'}'
;

ActionDef:
	name = WORD ('and'|'the')? (WORD)? (argument = WORD)? ((preposition = PREP)? | (optionalPref ?= '['? (preposition = PREP|'out'|'off'|'on' 'the' 'row') ']'?))	
;

PREP: ('on' | 'in' | 'from' | 'to' | 'into' | 'for' | 'with');
WORD: ID;



StateDef: postive = StateName PREP? ('/' negative = StateName)?;
StateName: name = (WORD) ('and'|'off')?  (WORD)?;

PropertyDef: name = WORD (plural ?= '*')?;


//

ID_OR_STRING: (ID | STRING);

Scenario:
       'Scenario:' name = ID_OR_STRING WORD? ('out'|'off'|'on'|'in'|'-'|'the'|'to' 'the'|'to')? WORD? ('off'|'on'|'in'|'-'|'the')? WORD? ('on'|'in'|'-'|'the')? WORD? ('in'|'-'|'the')? WORD?
       ((('Given''the'|'Given''I'|'Given') ('do' 'not')? ((OPTION)) | ('Given' ('the'|'all' 'the'|'I')? ('do' 'not')? preStateE = ScenarioState))
       'which' 'means')?
       
       'Given' preState = ScenarioState
       'When' action = ScenarioAction
       'Then' postState = ScenarioState
       
       
       (((('When' 'I'|'When' 'the'|'When'|'And''I') ('do' 'not')? ((OPTION))) | ((('When' 'I') |('When' 'I' 'do' 'not')| ('When' 'the') | ('Given' 'I') | ('When')) actionE = ScenarioAction ))
       'which' 'means')?
       
       'Given' preState1 = ScenarioState
       'When' action1 = ScenarioAction
       'Then' postState1 = ScenarioState
       
       
       ((('Then''the'|'Then''I'|'Then') ('do' 'not')? ((OPTION)) | ('Then' ('the'|'all' 'the'|'I')? ('do' 'not')? preStateE1 = ScenarioState))
       'which' 'means')?
       
       'Given' preState2 = ScenarioState
       'When' action2 = ScenarioAction
       'Then' postState2 = ScenarioState
;


ScenarioState:
	states += StatePhrase ('And' states += StatePhrase)*
;

ScenarioAction:
	actions += ActionPhrase ('And' actions += ActionPhrase)*
;

StatePhrase: epsp = EntityPropertyStatePhrase | esp = EntityStatePhrase;
 //sr = ScenarioRef | 


ScenarioRef:
	scenarioRef = [Scenario | ID_OR_STRING]
;

//ENTITY_IDENTITY: '#'? (INT | STRING);
ENTITY_IDENTITY: '#'? (INT | STRING);
OPTION:'#'? (INT | STRING) ;

EntityRef:
	 'the' (entity = [EntityDef | WORD] name = ENTITY_IDENTITY) | (name = ENTITY_IDENTITY)
;

EntityStatePhrase:
	entity = EntityRef 'is' ('not')? state = [StateName]
	 
;

EntityPropertyStatePhrase:
	 'the' property = [PropertyDef] ('of'|'for') entity = EntityRef 'is' ('not')? propertyValue = StringValue 
;


//terminal UNCLOSED_STRING : '"' (!'"')* EOF;

PropertyValue: SimpleValue | ListValue | SetValue
	
;

SimpleValue: IntValue | BooleanValue | StringValue | DoubleValue;

ListValue:
	{ListValue} '[' (values += SimpleValue (',' values += SimpleValue)*)? ']'
;

NestedList:
	{NestedList} '[' (values += ListValue (',' values += ListValue)*)? ']'
;

SetValue:
	{SetValue} '{' (values += SimpleValue (',' values += SimpleValue)*)? '}'
;

StringValue:
	value = STRING
;	

IntValue:
	value = INT
;

DoubleValue:
	value = DOUBLE
;

TRUE: ('true' | 'yes');
FALSE: ('false' | 'no');

BooleanValue:
	value = (TRUE | FALSE)
;


ActionPhrase: EntityAction;
// Removed: VerifyAction | VerbAction

VerbAction:
	action = ActionRef 'and'? WORD? 'on'? (WORD'-'WORD)? ('for' 'the'| 'the'|'on')? (entity = EntityDef)? ('on'|'off'|'in')? entity2 = EntityRef ('on'|'off'|'in')? ('of'|'for'|'for' 'the'|'of' 'the')? PREP? entity = EntityRef?
;

EntityAction: entityAction = EntityRef actionDef = [ActionDef] (propertyRef = PropertyRef)?;

PropertyRef:
    propertyref = 'to' property = [PropertyDef] propertyValue = StringValue ('with' properyValue2 = StringValue propery2 = [PropertyDef]) 
;

ActionRef: verb = [ActionDef | WORD] 'on'? (argument = PropertyValue)? (preposition = PREP)? (('the'|'on')(entity = EntityDef))? ;

VerifyAction:
	'assure' state = StatePhrase
;

DOUBLE returns ecore::EDouble : INT'.'INT;