grammar dk.sdu.bdd.xtext.BddDsl with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate bddDsl "http://www.sdu.dk/bdd/xtext/BddDsl"

Model:
	('model' name = ID)
	(
		(modelRefs += ModelRef) |
		(declarativeEntityDef += DeclarativeEntityDef) |
		(imperativeEntityDef += ImperativeEntityDef) |
		(scenarios += Scenario)
	)*
;

ModelRef:
	'using' modelRef = [Model]
;


DeclarativeEntityDef:
	'declarative' 'entity' name = ID ('-'ID)? ('is' superEntities += [DeclarativeEntityDef] (',' superEntities += [DeclarativeEntityDef])*)? '{'
		('actions:' (actions += ActionDef) ((',') actions += ActionDef)*)?
		('states:' (states += StateDef) ((',') states += StateDef)*)?
		('properties:' (properties += PropertyDef) ((',') properties += PropertyDef)*)?
	'}'
;

ImperativeEntityDef:
	'imperative' 'entity' name = ID ('-'ID)? ('is' superEntities += [ImperativeEntityDef] (',' superEntities += [ImperativeEntityDef])*)? '{'
		('actions:' (actions += ImperativeActionDef)  ((',') actions += ImperativeActionDef)*)?
		('states:' (states += ImperativeStateDef) ((',') states += ImperativeStateDef)*)?
		('properties:' (properties += ImperativePropertyDef) ((',') properties += ImperativePropertyDef)*)?
	'}'
;

ImperativeActionDef:
	name = ID (('and'|'the') ID)?  ('[' (preposition = PREP) ']')?	 ('the' argument = ID)?
;
ActionDef:
	name = ID (('and'|'the') ID)?  ('[' (preposition = PREP) ']')?	 ('the' argument = ID)?
;

PREP: ('on' | 'in' | 'from' | 'to' | 'into' | 'for' | 'with' | 'out' | 'off' | 'on' 'the' 'row');


StateDef: postive = StateName ('/' negative = StateName)?;
StateName: name = ID (('and'|'off') ID)?;

//Remove plural
PropertyDef: name = ID (ID?);

ImperativeStateDef: postive = ImperativeStateName PREP? ('/' negative = ImperativeStateName)?;
ImperativeStateName: name = (ID) ('and'|'off')?  (ID)?;

//Remove Plural
ImperativePropertyDef: name = ID (ID?);

//Multiple ID's for one name, Scenario-ref is not used, maybe string instead?
//Does not?
Scenario:
       'Scenario:' STRING
       'Given' ('the'|'all' 'the'|'I')? ('do' 'not' | 'does' 'not')? preStateE = DeclarativeScenarioState
       imperative1 = ImperativeScenario?
       
       'When' ('I'|'the')? ('do' 'not'| 'does' 'not')? actionE = DeclarativeScenarioAction 
	   imperative2 = ImperativeScenario?
       
       'Then' ('the'|'all' 'the'|'I')? ('do' 'not'| 'does' 'not')? preStateE1 = DeclarativeScenarioState
	   imperative3 = ImperativeScenario?
;

//Match the scenario to the declarative 
ImperativeScenario:
   'which' 'means'
       
   'Given' ('the'|'all' 'the'|'I')? ('do' 'not' | 'does' 'not')? preState = ImperativeScenarioState
   'When' ('I'|'the')? ('do' 'not'| 'does' 'not')? action = ImperativeScenarioAction
   'Then' ('the'|'all' 'the'|'I')? ('do' 'not'| 'does' 'not')? postState = ImperativeScenarioState
;


DeclarativeScenarioState:
	states += (DeclarativeEntityPropertyStatePhrase | DeclarativeEntityStatePhrase) ('And' states += (DeclarativeEntityPropertyStatePhrase | DeclarativeEntityStatePhrase))*
;

ImperativeScenarioState:
	states += ImperativeStatePhrase ('And' states += ImperativeStatePhrase)*
;



DeclarativeScenarioAction:
	actions += DeclarativeActionPhrase ('And' actions += DeclarativeActionPhrase)*
;

ImperativeScenarioAction:
	actions += ImperativeEntityAction ('And' actions += ImperativeEntityAction)*
;
 
//Maybe gather?
DeclarativeStatePhrase:
	epsp = DeclarativeEntityPropertyStatePhrase | esp = DeclarativeEntityStatePhrase
;

//Maybe gather?
ImperativeStatePhrase:
	epsp = ImperativeEntityPropertyStatePhrase | esp = ImperativeEntityStatePhrase
;


ENTITY_IDENTITY: ('#'INT) | STRING;
OPTION:'#'? (INT | STRING) ;


DeclarativeEntityRef:
	(ID OPTION 'for' 'the')? ('for'|'of')? (('the'|'all' 'the') entity = [DeclarativeEntityDef | ID] name = ENTITY_IDENTITY) | (name = ENTITY_IDENTITY)
;

ImperativeEntityRef:
	 'the' entity = [ImperativeEntityDef] name = STRING
;



DeclarativeEntityStatePhrase:
	(property = [PropertyDef | ID]? ('of'|'of' 'the')? OPTION? ('for'|'for' 'the')? ('of'|'of' 'the'|'for' 'the'|'for'))? 
	entity = DeclarativeEntityRef ('is'|'are') ('not')? state = [StateName] ID?	
;

ImperativeEntityStatePhrase:
	entity = ImperativeEntityRef 'is' state = [ImperativeStateName]
;



DeclarativeEntityPropertyStatePhrase:
	property = [PropertyDef | ID]? ('of'|'of' 'the')? OPTION? ('of'|'for' |'from'|'for' 'the'|'of' 'the')  entity = DeclarativeEntityRef
	((('is'|'is' 'not') value = SimpleValue ID?) ID? | (('are'|'are' 'not') (values += SimpleValue) ID? | (',' values += SimpleValue)*) ID?) 
;

ImperativeEntityPropertyStatePhrase:
	 property = [ImperativePropertyDef] ('of'|'for') entity = ImperativeEntityRef 'is' propertyValue = StringValue 
;

//Simple values
SimpleValue: IntValue | StringValue | DoubleValue;


StringValue:
	value = STRING
;	

IntValue:
	value = INT
;

DoubleValue:
	value = DOUBLE
;

//Maybe gather?
DeclarativeActionPhrase:
	DeclarativeEntityAction | VerbAction
	// Deleted: | VerifyAction
;

VerbAction:
	action = DeclarativeActionRef 'and'? ID? 'on'? (ID'-'ID)? ('for' 'the'| 'the'|'on')? (entity = DeclarativeEntityDef)? ('on'|'off'|'in')? entity2 = DeclarativeEntityRef ('on'|'off'|'in')? ('of'|'for'|'for' 'the'|'of' 'the')? PREP? entity3 = DeclarativeEntityRef?
;


DeclarativeEntityAction: 
	entityAction = DeclarativeEntityRef (actionDef = [ActionDef]) (entityRef = DeclarativeEntityRef)? (propertyRef = PropertyRef)?
;

ImperativeEntityAction: 
	entityAction = ImperativeEntityRef actionDef = [ImperativeActionDef] (propertyRef = ImperativePropertyRef)?
;


PropertyRef:
    propertyref = 'to' property = [PropertyDef] propertyValue = StringValue ('with' properyValue2 = StringValue propery2 = [PropertyDef])? 
;
ImperativePropertyRef:
    propertyref = 'to' property = [ImperativePropertyDef] propertyValue = StringValue ('with' properyValue2 = StringValue propery2 = [ImperativePropertyDef])? 
;

DeclarativeActionRef: verb = [ActionDef | ID] 'on'? (argument = SimpleValue)? (preposition = PREP)? (('the'|'on')(entity = DeclarativeEntityDef))? ;

DOUBLE returns ecore::EDouble : INT'.'INT;
